import tensorflow as tf
from keras._tf_keras.keras.models import Sequential
from keras._tf_keras.keras.layers import Dense
import numpy as np


# Datos de ejemplo
X = np.array([
    [-4,-0.000500015,-0.015152],
    [-4,-0.000500015,-0.015152],
    [-6,-0.000750023,-0.022728],
    [-6,-0.000750023,-0.022728],
    [-3,-0.000375011,-0.011364],
    [-5,-0.000625019,-0.01894],
    [-6,-0.000750023,-0.022728],
    [-5,-0.000625019,-0.01894],
    [-4,-0.000500015,-0.015152],
    [-5,-0.000625019,-0.01894],
    [-7,-0.000875027,-0.026516],
    [-3,-0.000375011,-0.011364],
    [-5,-0.000625019,-0.01894],
    [-4,-0.000500015,-0.015152],
    [-5,-0.000625019,-0.01894],
    [-6,-0.000750023,-0.022728],
    [-6,-0.000750023,-0.022728],
    [-5,-0.000625019,-0.01894],
    [-8,-0.00100003,-0.030304],
    [-6,-0.000750023,-0.022728],
    [-5,-0.000625019,-0.01894],
    [-7,-0.000875027,-0.026516],
    [-4,-0.000500015,-0.015152],
    [-6,-0.000750023,-0.022728],
    [-4,-0.000500015,-0.015152],
    [-5,-0.000625019,-0.01894],
    [-4,-0.000500015,-0.015152],
    [-7,-0.000875027,-0.026516],
    [-6,-0.000750023,-0.022728],
    [-4,-0.000500015,-0.015152],
    [-5,-0.000625019,-0.01894],
    [-6,-0.000750023,-0.022728],
    [-7,-0.000875027,-0.026516],
    [-6,-0.000750023,-0.022728],
    [-4,-0.000500015,-0.015152],
    [-6,-0.000750023,-0.022728],
    [-4,-0.000500015,-0.015152],
    [-8,-0.00100003,-0.030304],
    [-5,-0.000625019,-0.01894],
    [-6,-0.000750023,-0.022728],
    [-5,-0.000625019,-0.01894],
    [-4,-0.000500015,-0.015152],
    [-6,-0.000750023,-0.022728],
    [-4,-0.000500015,-0.015152],
    [-5,-0.000625019,-0.01894],
    [-6,-0.000750023,-0.022728],
    [-6,-0.000750023,-0.022728],
    [-8,-0.00100003,-0.030304],
    [-5,-0.000625019,-0.01894],
    [-4,-0.000500015,-0.015152],
    [-6,-0.000750023,-0.022728],
    [-6,-0.000750023,-0.022728],
    [-3,-0.000375011,-0.011364],
    [-4,-0.000500015,-0.015152],
    [-6,-0.000750023,-0.022728],
    [-5,-0.000625019,-0.01894],
    [-5,-0.000625019,-0.01894],
    [-4,-0.000500015,-0.015152],
    [-6,-0.000750023,-0.022728],
    [-3,-0.000375011,-0.011364],
    [-4,-0.000500015,-0.015152],
    [-6,-0.000750023,-0.022728],
    [-5,-0.000625019,-0.01894],
    [-7,-0.000875027,-0.026516],
    [-6,-0.000750023,-0.022728],
    [-4,-0.000500015,-0.015152],
    [-4,-0.000500015,-0.015152],
    [-5,-0.000625019,-0.01894],
    [-4,-0.000500015,-0.015152],
    [-7,-0.000875027,-0.026516],
    [-6,-0.000750023,-0.022728],
    [-4,-0.000500015,-0.015152],
    [-4,-0.000500015,-0.015152],
    [-5,-0.000625019,-0.01894],
    [-6,-0.000750023,-0.022728],
    [-5,-0.000625019,-0.01894],
    [-6,-0.000750023,-0.022728],
    [-5,-0.000625019,-0.01894],
    [-3,-0.000375011,-0.011364],
    [-6,-0.000750023,-0.022728],
    [-5,-0.000625019,-0.01894],
    [-6,-0.000750023,-0.022728],
    [-6,-0.000750023,-0.022728],
    [-5,-0.000625019,-0.01894],
    [-6,-0.000750023,-0.022728],
    [-6,-0.000750023,-0.022728],
    [-6,-0.000750023,-0.022728],
    [-6,-0.000750023,-0.022728],
    [-6,-0.000750023,-0.022728],
    [-5,-0.000625019,-0.01894],
    [-6,-0.000750023,-0.022728],
    [-7,-0.000875027,-0.026516],
    [-5,-0.000625019,-0.01894],
    [-4,-0.000500015,-0.015152],
    [-6,-0.000750023,-0.022728],
    [-6,-0.000750023,-0.022728],
    [-7,-0.000875027,-0.026516],
    [-8,-0.00100003,-0.030304],
    [-5,-0.000625019,-0.01894],
    [-7,-0.000875027,-0.026516]
])
y = np.array([
    -0.00348495,
    -0.00348495,
    -0.00522743,
    -0.00522743,
    -0.00261372,
    -0.00435619,
    -0.00522743,
    -0.00435619,
    -0.00348495,
    -0.00435619,
    -0.00609867,
    -0.00261372,
    -0.00435619,
    -0.00348495,
    -0.00435619,
    -0.00522743,
    -0.00522743,
    -0.00435619,
    -0.00696991,
    -0.00522743,
    -0.00435619,
    -0.00609867,
    -0.00348495,
    -0.00522743,
    -0.00348495,
    -0.00435619,
    -0.00348495,
    -0.00609867,
    -0.00522743,
    -0.00348495,
    -0.00435619,
    -0.00522743,
    -0.00609867,
    -0.00522743,
    -0.00348495,
    -0.00522743,
    -0.00348495,
    -0.00696991,
    -0.00435619,
    -0.00522743,
    -0.00435619,
    -0.00348495,
    -0.00522743,
    -0.00348495,
    -0.00435619,
    -0.00522743,
    -0.00522743,
    -0.00696991,
    -0.00435619,
    -0.00348495,
    -0.00522743,
    -0.00522743,
    -0.00261372,
    -0.00348495,
    -0.00522743,
    -0.00435619,
    -0.00435619,
    -0.00348495,
    -0.00522743,
    -0.00261372,
    -0.00348495,
    -0.00522743,
    -0.00435619,
    -0.00609867,
    -0.00522743,
    -0.00348495,
    -0.00348495,
    -0.00435619,
    -0.00348495,
    -0.00609867,
    -0.00522743,
    -0.00348495,
    -0.00348495,
    -0.00435619,
    -0.00522743,
    -0.00435619,
    -0.00522743,
    -0.00435619,
    -0.00261372,
    -0.00522743,
    -0.00435619,
    -0.00522743,
    -0.00522743,
    -0.00435619,
    -0.00522743,
    -0.00522743,
    -0.00522743,
    -0.00522743,
    -0.00522743,
    -0.00435619,
    -0.00522743,
    -0.00609867,
    -0.00435619,
    -0.00348495,
    -0.00522743,
    -0.00522743,
    -0.00609867,
    -0.00696991,
    -0.00435619,
    -0.00609867
])

# Crear el modelo
model = Sequential()
model.add(Dense(8, input_dim=3, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

# Compilar el modelo
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

# Entrenar el modelo
model.fit(X, y, epochs=900, verbose=1)

t = np.array([[-5, -0.000625019,  -0.01894]])

# Predicci√≥n
predictions = model.predict(t)
print(predictions)
